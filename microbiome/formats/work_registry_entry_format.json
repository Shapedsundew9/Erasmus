{
    "name": {
        "type": "string",
        "minlength": 1,
        "maxlength": 64,
        "regex": "[ a-zA-Z-0-9!\\#\\$%\\&'\\*\\+\\-\\.\\^_`\\|\\~:]+",
        "required": true,
        "meta": {
            "database": {
                "type": "VARCHAR"
            },
            "definition": {
                "location": ["WORKER"],
                "immutable": true
            },
            "compressed": false,
            "description": "A short name to identify this work."
        }
    },
    "gene_pool": {
        "type": "string",
        "minlength": 1,
        "maxlength": 256,
        "meta": {
            "database": {
                "type": "VARCHAR"
            },
            "definition": {
                "location": ["WORKER"],
                "immutable": true
            },
            "compressed": false,
            "description": "File path of the gene pool generated module."
        }
    },
    "description": {
        "type": "string",
        "minlength": 1,
        "maxlength": 2048,
        "regex": "[ a-zA-Z-0-9!\\#\\$%\\&'\\*\\+\\-\\.\\^_`\\|\\~:]+",
        "meta": {
            "database": {
                "type": "BYTEA",
                "nullable": true                
            },
            "definition": {
                "location": ["WORKER"],
                "immutable": true
            },
            "compressed": true,
            "description": "A more detailed description of this work."
        }
    },
    "populations": {
        "meta": {
            "database": {
                "type": "BYTEA"
            },
            "definition": {
                "location": ["WORKER"],
                "immutable": true
            },
            "description": "A list of populations for this work. There must be at least one mutation population."
        },
        "type": "list",
        "minlength": 1,
        "maxlength": 2048,
        "schema": {
            "type": "string",
            "minlength": 64,
            "maxlength": 64,
            "regex": "[0-9a-f]{64}"
        }
    },
    "signature": {
        "meta": {
            "database": {
                "type": "BYTEA",
                "properties": "PRIMARY KEY"
            },
            "definition": {
                "location": ["WORKER"],
                "immutable": true
            },
            "sha256": true,
            "description": "Unique identifier for this work."
        },
        "type": "string",
        "minlength": 64,
        "maxlength": 64,
        "regex": "[0-9a-f]{64}",
        "default_setter": "set_signature"
    },        
    "predecessor": {
        "meta": {
            "database": {
                "type": "BYTEA",
                "nullable": true
            },
            "definition": {
                "location": ["WORKER"],
                "immutable": true
            },
            "sha256": true,
            "description": "The signature of the work that this work was derived from."
        },
        "type": "string",
        "minlength": 64,
        "maxlength": 64,
        "regex": "[0-9a-f]{64}"
    },        
    "created": {
        "meta": {
            "database": {
                "type": "TIMESTAMP"
            },
            "definition": {
                "location": ["WORKER"],
                "immutable": true
            },
            "description": "Time the work was created."
        },
        "type": "string",
        "minlength": 27,
        "maxlength": 27,
        "regex": "20[2-9][0-9]-(1[0-2]|0[1-9])-([0-2][0-9]|3[01])T[0-2][0-9](:[0-5][0-9]){2}\\.[0-9]{6}Z",
        "default_setter": "set_created"
    },
    "updated": {
        "meta": {
            "database": {
                "type": "TIMESTAMP"
            },
            "definition": {
                "location": ["WORKER"],
                "immutable": true
            },
            "description": "The last time the work was updated (does not include popluation_list & population_count updates)."
        },
        "type": "string",
        "minlength": 27,
        "maxlength": 27,
        "regex": "20[2-9][0-9]-(1[0-2]|0[1-9])-([0-2][0-9]|3[01])T[0-2][0-9](:[0-5][0-9]){2}\\.[0-9]{6}Z",
        "default_setter": "set_created"
    }
}