{
    "graph": {
        "meta": {
            "database": {
                "type": "BYTEA"
            },
            "definition": {
                "location": ["WORKER"],
                "immutable": true
            },
            "compressed": true,
            "description": "Defines the sub-codes of the genetic code and how they are connected together."
        },
        "type": "dict",
        "required": true,
        "check_with": "valid_graph"
    },
    "signature": {
        "meta": {
            "database": {
                "type": "BYTEA",
                "properties": "PRIMARY KEY"
            },
            "definition": {
                "location": ["WORKER"],
                "immutable": true
            },
            "sha256": true,
            "description": "Unique identifier for this genetic code."
        },
        "type": "string",
        "minlength": 64,
        "maxlength": 64,
        "regex": "[0-9a-f]{64}",
        "default_setter": "set_signature"
    },        
    "gca": {
        "meta": {
            "database": {
                "type": "BYTEA"
            },
            "definition": {
                "location": ["WORKER"],
                "immutable": true
            },
            "sha256": true,
            "description": "The signature of Genetic Code A or the 'zero entry' if this genetic code is a codon. Its connectivity to the Inputs, Constants, genetic code B and outputs are defined in the 'graph'."
        },
        "type": "string",
        "required": true,
        "minlength": 64,
        "maxlength": 64,
        "regex": "[0-9a-f]{64}",
        "default": "0000000000000000000000000000000000000000000000000000000000000000"
    },
    "gcb": {
        "meta": {
            "database": {
                "type": "BYTEA"
            },
            "definition": {
                "location": ["WORKER"],
                "immutable": true
            },
            "sha256": true,
            "description": "The signature of Genetic Code B or the 'zero entry' if it is not connected to anything. Connectivity to the Inputs, Constants, genetic code A and outputs are defined in the 'graph'."
        },
        "type": "string",
        "required": true,
        "minlength": 64,
        "maxlength": 64,
        "regex": "[0-9a-f]{64}",
        "default": "0000000000000000000000000000000000000000000000000000000000000000"
    },
    "reference_count": {
        "meta": {
            "database": {
                "type": "BIGINT"
            },
            "definition": {
                "location": ["WORKER"],
                "immutable": false
            },
            "description": "The number of times this code is referenced in other codes. If this code is referenced by code A once and no other then the reference count is 1. If genetic code X is then referenced by genetic code Y this code is referenced by both X & Y (through X) and the count is 2."
        },
        "type": "integer",
        "min": 0,
        "default": 0
    },
    "generation": {
        "meta": {
            "database": {
                "type": "BIGINT"
            },
            "definition": {
                "location": ["WORKER"],
                "immutable": false
            },
            "description": "The number of generations of genetic code evolved to create this code. A codon is generation always generation 1. This value may change if the creator changes."
        },
        "type": "integer",
        "min": 0,
        "default": 0
    },
    "code_depth": {
        "meta": {
            "database": {
                "type": "INTEGER"
            },
            "definition": {
                "location": ["WORKER"],
                "immutable": true
            },
            "description": "The depth of the code vertex graph." 
        },
        "type": "integer",
        "min": 1,
        "default": 1
    },
    "codon_depth": {
        "meta": {
            "database": {
                "type": "INTEGER"
            },
            "definition": {
                "location": ["WORKER"],
                "immutable": true
            },
            "description": "The depth of the graph after expansion to codon vertices."
        },
        "type": "integer",
        "min": 1,
        "default": 1
    },
    "num_codes": {
        "meta": {
            "database": {
                "type": "INTEGER"
            },
            "definition": {
                "location": ["WORKER"],
                "immutable": true
            },
            "description": "The number of vertices in the code vertex graph."
        },
        "type": "integer",
        "min": 1,
        "default": 1
    },
    "num_unique_codes": {
        "meta": {
            "database": {
                "type": "INTEGER"
            },
            "definition": {
                "location": ["WORKER"],
                "immutable": true
            },
            "description": "The number of unique codes in the code vertex graph."
        },
        "type": "integer",
        "min": 1,
        "default": 1
    },
    "raw_num_codons": {
        "meta": {
            "database": {
                "type": "INTEGER"
            },
            "definition": {
                "location": ["WORKER"],
                "immutable": true
            },
            "description": "The number of verticies in the codon vertex graph."
        },
        "type": "integer",
        "min": 1,
        "default": 1
    },
    "opt_num_codons": {
        "meta": {
            "database": {
                "type": "INTEGER"
            },
            "definition": {
                "location": ["WORKER"],
                "immutable": false
            },
            "description": "The number of verticies in the codon vertex graph after optimisation. As optimisations improve this value may change."
        },
        "type": "integer",
        "min": 0,
        "default_setter": "set_opt_num_codons"
    },
    "num_inputs": {
        "meta": {
            "database": {
                "type": "INTEGER"
            },
            "definition": {
                "location": ["WORKER"],
                "immutable": true
            },
            "description": "The number of inputs to the code."
        },
        "type": "integer",
        "min": 0,
        "default_setter": "set_num_inputs"
    },
    "input0_type": {
        "meta": {
            "database": {
                "type": "SMALLINT"
            },
            "definition": {
                "location": ["WORKER"],
                "immutable": true
            },
            "description": "The Genetic Code Type Definition for input 0."
        },
        "type": "integer",
        "min": -32768,
        "max": 32767,
        "check_with": "valid_gc_type",
        "default_setter": "set_input0"
    },
    "input1_type": {
        "meta": {
            "database": {
                "type": "SMALLINT"
            },
            "definition": {
                "location": ["WORKER"],
                "immutable": true
            },
            "description": "The Genetic Code Type Definition for input 1."
        },
        "type": "integer",
        "min": -32768,
        "max": 32767,
        "check_with": "valid_gc_type",
        "default_setter": "set_input1"
    },
    "input2_type": {
        "meta": {
            "database": {
                "type": "SMALLINT"
            },
            "definition": {
                "location": ["WORKER"],
                "immutable": true
            },
            "description": "The Genetic Code Type Definition for input 2."
        },
        "type": "integer",
        "min": -32768,
        "max": 32767,
        "check_with": "valid_gc_type",
        "default_setter": "set_input2"
    },
    "input3_type": {
        "meta": {
            "database": {
                "type": "SMALLINT"
            },
            "definition": {
                "location": ["WORKER"],
                "immutable": true
            },
            "description": "The Genetic Code Type Definition for input 3."
        },
        "type": "integer",
        "min": -32768,
        "max": 32767,
        "check_with": "valid_gc_type",
        "default_setter": "set_input3"
    },
    "input4_type": {
        "meta": {
            "database": {
                "type": "SMALLINT"
            },
            "definition": {
                "location": ["WORKER"],
                "immutable": true
            },
            "description": "The Genetic Code Type Definition for input 4."
        },
        "type": "integer",
        "min": -32768,
        "max": 32767,
        "check_with": "valid_gc_type",
        "default_setter": "set_input4"
    },
    "input5_type": {
        "meta": {
            "database": {
                "type": "SMALLINT"
            },
            "definition": {
                "location": ["WORKER"],
                "immutable": true
            },
            "description": "The Genetic Code Type Definition for input 5."
        },
        "type": "integer",
        "min": -32768,
        "max": 32767,
        "check_with": "valid_gc_type",
        "default_setter": "set_input5"
    },
    "input6_type": {
        "meta": {
            "database": {
                "type": "SMALLINT"
            },
            "definition": {
                "location": ["WORKER"],
                "immutable": true
            },
            "description": "The Genetic Code Type Definition for input 6."
        },
        "type": "integer",
        "min": -32768,
        "max": 32767,
        "check_with": "valid_gc_type",
        "default_setter": "set_input6"
    },
    "input7_type": {
        "meta": {
            "database": {
                "type": "SMALLINT"
            },
            "definition": {
                "location": ["WORKER"],
                "immutable": true
            },
            "description": "The Genetic Code Type Definition for input 7."
        },
        "type": "integer",
        "min": -32768,
        "max": 32767,
        "check_with": "valid_gc_type",
        "default_setter": "set_input7"
    },
    "num_outputs": {
        "meta": {
            "database": {
                "type": "INTEGER"
            },
            "definition": {
                "location": ["WORKER"],
                "immutable": true
            },
            "description": "The number of outputs to the code."
        },
        "type": "integer",
        "min": 1,
        "default_setter": "set_num_outputs"
    },
    "output0_type": {
        "meta": {
            "database": {
                "type": "SMALLINT"
            },
            "definition": {
                "location": ["WORKER"],
                "immutable": true
            },
            "description": "The Genetic Code Type Definition for output 0."
        },
        "type": "integer",
        "min": -32768,
        "max": 32767,
        "check_with": "valid_gc_type",
        "default_setter": "set_output0"
    },
    "output1_type": {
        "meta": {
            "database": {
                "type": "SMALLINT"
            },
            "definition": {
                "location": ["WORKER"],
                "immutable": true
            },
            "description": "The Genetic Code Type Definition for output 1."
        },
        "type": "integer",
        "min": -32768,
        "max": 32767,
        "check_with": "valid_gc_type",
        "default_setter": "set_output1"
    },
    "output2_type": {
        "meta": {
            "database": {
                "type": "SMALLINT"
            },
            "definition": {
                "location": ["WORKER"],
                "immutable": true
            },
            "description": "The Genetic Code Type Definition for output 2."
        },
        "type": "integer",
        "min": -32768,
        "max": 32767,
        "check_with": "valid_gc_type",
        "default_setter": "set_output2"
    },
    "output3_type": {
        "meta": {
            "database": {
                "type": "SMALLINT"
            },
            "definition": {
                "location": ["WORKER"],
                "immutable": true
            },
            "description": "The Genetic Code Type Definition for output 3."
        },
        "type": "integer",
        "min": -32768,
        "max": 32767,
        "check_with": "valid_gc_type",
        "default_setter": "set_output3"
    },
    "alpha_class": {
        "meta": {
            "database": {
                "type": "BIGINT"
            },
            "definition": {
                "location": ["WORKER"],
                "immutable": false
            },
            "description": "The classification of the genetic code."
        },
        "type": "integer",
        "default": -1,
        "check_with": "valid_alpha_class"
    },
    "beta_class": {
        "meta": {
            "database": {
                "type": "BIGINT"
            },
            "definition": {
                "location": ["WORKER"],
                "immutable": false
            },
            "description": "The classification of the genetic code."
        },
        "type": "integer",
        "default": -1
    },
    "properties": {
        "meta": {
            "database": {
                "type": "BIGINT"
            },
            "definition": {
                "location": ["BIOME"],
                "immutable": false
            },
            "description": "The properties of the inputs & outputs",
            "codec": {
                "extended": 0,
                "arithmetic": 1,
                "logical": 2
            }
        },
        "type": "dict",
        "schema": {
            "extended": {
                "type": "boolean",
                "default": false
            },
            "arithmetic": {
                "type": "boolean",
                "default": false                
            },
            "logical": {
                "type": "boolean",
                "default": false                
            }
        },
        "default": {}
    },
    "fitness": {
        "meta": {
            "database": {
                "type": "DOUBLE PRECISION"
            },
            "definition": {
                "location": ["WORKER"],
                "immutable": false
            },
            "description": "A measure of success of the genetic code. The higher the better."
        },
        "type": "float",
        "min": 0.0, 
        "default": 0.0
    },
    "evolvability": {
        "meta": {
            "database": {
                "type": "DOUBLE PRECISION"
            },
            "definition": {
                "location": ["WORKER"],
                "immutable": false
            },
            "description": "A measure of success of the genetic codes descendants. The higher the better."
        },
        "type": "float",
        "min": 0.0, 
        "default": 0.0
    },
    "creator": {
        "meta": {
            "database": {
                "type": "BYTEA"
            },
            "definition": {
                "location": ["BIOME"],
                "immutable": false
            },
            "sha256": true,
            "description": "The UUID identifying the creator. If the genetic code has been created in another microbiome at an earlier time then this field will be updated."
        },
        "type": "string",
        "minlength": 64,
        "maxlength": 64,
        "regex": "[0-9a-f]{64}",
        "default": "0000000000000000000000000000000000000000000000000000000000000000"
    },
    "updated": {
        "meta": {
            "database": {
                "type": "TIMESTAMP"
            },
            "definition": {
                "location": ["WORKER"],
                "immutable": false
            },
            "description": "The date and time of the last modification to this genetic code."
        },
        "type": "string",
        "minlength": 27,
        "maxlength": 27,
        "regex": "20[2-9][0-9]-(1[0-2]|0[1-9])-([0-2][0-9]|3[01])T[0-2][0-9](:[0-5][0-9]){2}\\.[0-9]{6}Z",
        "check_with": "valid_created",
        "default_setter": "set_created"
    },
    "created": {
        "meta": {
            "database": {
                "type": "TIMESTAMP"
            },
            "definition": {
                "location": ["WORKER"],
                "immutable": true
            },
            "description": "The date and time of the codes creation. If the genetic code has been created in another microbiome at an earlier time then this field will be updated."
        },
        "type": "string",
        "minlength": 27,
        "maxlength": 27,
        "regex": "20[2-9][0-9]-(1[0-2]|0[1-9])-([0-2][0-9]|3[01])T[0-2][0-9](:[0-5][0-9]){2}\\.[0-9]{6}Z",
        "check_with": "valid_created",
        "default_setter": "set_created"
    },
    "meta_data": {
        "meta": {
            "database": {
                "type": "BYTEA"
            },
            "definition": {
                "location": ["WORKER"],
                "immutable": false
            },
            "compressed": true,
            "description": "Other data associated with this genetic code."
        },
        "type": "dict",
        "required": true,
        "schema": {
            "name": {
                "type": "string"
            },
            "extended_properties": {
                "type": "dict"
            },
            "extended_class": {
                "type": "dict"
            },
            "parents": {
                "type": "list",
                "schema": {
                    "type": "list",
                    "required": true,
                    "minlength": 1,
                    "schema": {
                        "type": "string",
                        "minlength": 64,
                        "maxlength": 64,
                        "regex": "[0-9a-f]{64}"
                    }
                }
            },
            "output_rules": {
                "type": "dict",
                "schema": {
                    "keys": {
                        "type": "integer",
                        "min": 0,
                        "max": 256
                    },
                    "values": {
                        "allowed": ["c_type_promotion"]
                    }
                }
            },
            "function": {
                "type": "dict",
                "keysrules": {
                    "type": "string"
                },
                "valuesrules": {
                    "type": "dict",
                    "keysrules": {
                        "type": "string",
                        "regex": "[0-9]*"
                    },
                    "valuesrules": {
                        "type": "dict",
                        "schema": {
                            "inline": {
                                "type": "string",
                                "required": true,
                                "check_with": "valid_inline"
                            },
                            "callable": {
                                "type": "string",
                                "check_with": "valid_callable"
                            }
                        }
                    },
                    "schema": {
                        "0": {
                            "required": true
                        }
                    }
                },
                "schema": {
                    "python3": {
                        "required": true
                    }
                }
            }
        },
        "default": {}
    }
}

